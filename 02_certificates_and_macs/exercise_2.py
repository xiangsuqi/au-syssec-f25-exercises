# 设定公钥的 Modulus 和 Exponent
Modulus = 0xB6E02FC22406C86D045FD7EF0A6406B27D22266516AE42409BCEDC9F9F76073EC330558719B94F940E5A941F5556B4C2022AAFD098EE0B40D7C4D03B72C8149EEF90B111A9AED2C8B8433AD90B0BD5D595F540AFC81DED4D9C5F57B786506899F58ADAD2C7051FA897C9DCA4B182842DC6ADA59CC71982A6850F5E44582A378FFD35F10B0827325AF5BB8B9EA4BD51D027E2DD3B4233A30528C4BB28CC9AAC2B230D78C67BE65E71B74A3E08FB81B71616A19D23124DE5D79208AC75A49CBACD17B21E4435657F532539D11C0A9A631B199274680A37C2C25248CB395AA2B6E15DC1DDA020B821A293266F144A2141C7ED6D9BF2482FF303F5A26892532F5EE3
Exponent = 65537

# 设定签名
Signature = 0x69D74225E48E251B6E5781668B3034A36FD0E81D86A7D2824D26C1A4A74E8AAC0DBED5118B0C778C6B96DE1FD536DB43B078A42FD2D279896CE6249A4A1C1945EB871B82B0F43C8A0670875ABCB3FCAAC4448E5AA2A12F0BBDCFC9F5AC768D53B864E1D9EFB98C428954D98846DCCA1BF28B596FF76967B3AAF8BA625D70ECB21CCEE8D8D75145BBD4231BA1482206989A8303FCDAB1CA44CBF7D1A0D83B8492261794E5C9CCA56D062E0EAC4CA13A59B6BD95BDF0BF2E6578E2C8DAE7BEC98B3C67449A46AA852751DDCDF6C2228C908AA013EACA9E03A26F32ACB81369E14026A68DA625EA6FDFACADBAEC9B360EAF251845D7D7268416790F3A35444881F9

# 设定正确的 SHA-256 哈希值
Hash = 0x6D52A3894A5661EB18C0999941D9FEDB401087CC894415CA4995353CC54891CD

# 进行 RSA 验证（解密签名）
decrypted = pow(Signature, Exponent, Modulus)
decrypted_hex = hex(decrypted)
print("Decrypted signature: " + decrypted_hex)

if hex(Hash)[2:] in decrypted_hex:
    print("Signature verification successful!")
else:
    print("Signature verification failed!")

Modulus = 0xC6CCE573E6FBD4BBE52D2D32A6DFE5813FC9CD2549B6712AC3D5943467A20A1CB05F69A640B1C4B7B28FD098A4A941593AD3DC94D63CDB7438A44ACC4D2582F74AA5531238EEF3496D71917E63B6ABA65FC3A484F84F6251BEF8C5ECDB3892E306E508910CC4284155FBCB5A89157E71E835BF4D72093DBE3A38505B77311B8DB3C724459AA7AC6D00145A04B7BA13EB510A984141224E656187814150A6795C89DE194A57D52EE65D1C532C7E98CD1A0616A46873D03404135CA171D35A7C55DB5E64E13787305604E511B4298012F1793988A202117C2766B788B778F2CA0AA838AB0A64C2BF665D9584C1A1251E875D1A500B2012CC41BB6E0B5138B84BCB
Exponent = 65537
Signature = 0x188a958903e66ddf5cfc1d68ea4a8f83d6512f8d6b44169eac63f5d26e6c84998baa8171845bed344eb0b7799229cc2d806af08e20e179a4fe034713eaf586ca59717df404966bd359583dfed331255c183884a3e69f82fd8c5b98314ecd789e1afd85cb49aaf2278b9972fc3eaad5410bdad536a1bf1c6e47497f5ed9487c03d9fd8b49a098264240ebd69211a4640a5754c4f51dd6025e6baceec4809a1272fa5693d7ffbf30850630bf0b7f4eff57059d24ed85c32bfba675a8ac2d16ef7d7927b2ebc29d0b07eaaa85d301a3202841594328d281e3aaf6ec7b3b77b640628005414501ef17063edec0339b67d3612e7287e469fc120057401e70f51ec9b4
Hash = 0xac5d79b4a1e84b9ea1f7f72b022158540f37c8557fc99f0c08b37f670632a177

decrypted = pow(Signature, Exponent, Modulus)
decrypted_hex = hex(decrypted)
print("Decrypted signature: " + decrypted_hex)

if hex(Hash)[2:] in decrypted_hex:
    print("Signature verification successful!")
else:
    print("Signature verification failed!")
